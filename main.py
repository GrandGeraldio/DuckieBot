import logging
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

logging.basicConfig(level=logging.INFO)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data="execute")],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –ü–æ–ª—É—á–∏—Ç—å —É—Ç–æ—á–∫—É ===
async def get_random_duck_url():
    async with aiohttp.ClientSession() as session:
        async with session.get("https://random-d.uk/api/random") as response:
            if response.status == 200:
                data = await response.json()
                return data.get("url")
            return None

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    if query.data == "execute":
        duck_url = await get_random_duck_url()
        if duck_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —É—Ç–æ—á–∫–∏
            await context.bot.send_photo(chat_id=chat_id, photo=duck_url, caption="–í–æ—Ç —Ç–µ–±–µ —É—Ç–æ—á–∫–∞ ü¶Ü")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            async with aiohttp.ClientSession() as session:
                async with session.get(duck_url) as duck_response:
                    if duck_response.status == 200:
                        file_bytes = await duck_response.read()
                        filename = duck_url.split("/")[-1]
                        await context.bot.send_document(chat_id=chat_id, document=file_bytes, filename=filename)
                    else:
                        await context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —É—Ç–æ—á–∫–∏.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ï—â—ë —É—Ç–æ—á–∫—É"
            again_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("ü¶Ü –ï—â—ë —É—Ç–æ—á–∫—É!", callback_data="execute")]
            ])
            await context.bot.send_message(chat_id=chat_id, text="–•–æ—á–µ—à—å –µ—â—ë –æ–¥–Ω—É? üëá", reply_markup=again_markup)

        else:
            await context.bot.send_message(chat_id=chat_id, text="üò¢ –£—Ç–æ—á–∫–∞ –∫—É–¥–∞-—Ç–æ —É–ø–ª—ã–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    elif query.data == "info":
        await query.edit_message_text(
            "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö —É—Ç–æ—á–µ–∫ —Å —Å–∞–π—Ç–∞ random-d.uk.\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Ç–æ—á–∫—É –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ñ–∞–π–ª–∞!"
        )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    bot_token = "8165993424:AAEZtBnopVdzNY1GgnXeE5enullhXBkm7Dk"
    app = ApplicationBuilder().token(bot_token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())